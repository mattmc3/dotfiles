# functions

# `ls` after `cd`
function cdl() {
    builtin cd "$@" && ls -F
}

function benchmark-zsh() {
    for i in $(seq 1 10); do
        /usr/bin/time zsh -i -c exit
    done
}

function benchmark-bash() {
    for i in $(seq 1 10); do
        /usr/bin/time bash -i -c exit
    done
}

# use keychain to store passwords
function get_pw() {
    security find-generic-password -ga "$1" -w
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


### golang ###
function resetgopath () {
    export GOPATH=$GLOBALGOPATH
    echo $GOPATH
}

function setgopath () {
    export GOPATH="$(pwd)"
    echo $GOPATH
}

function goinit () {
    mkdir pkg bin src
    setgopath
    mkdir src/$(basename $PWD)
    cd src/$(basename $PWD)
    te .
}


### python ###
function workon () {
    source "$WORKON_HOME/$@/bin/activate"
}

function pyclean () {
    find . -type f -name "*.py[co]" -delete
    find . -type d -name "__pycache__" -delete
}

function pip3update () {
    # the --outdated flag didn't give me everything :(
    pip3 list --format=freeze | awk -F"==" '{print $1}' | xargs -n1 pip3 install --upgrade
}

function pip2update () {
    # the --outdated flag didn't give me everything :(
    pip2 list --format=freeze | awk -F"==" '{print $1}' | xargs -n1 pip2 install -U
}
