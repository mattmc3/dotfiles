#!/usr/bin/env lua

-- Helper to check if a string is nil or empty
local function isempty(s)
    return s == nil or s == ""
end

-- Parse the spec
local specs = {}
local args = {...}
local i = 1

-- Collect specs until we hit '--'
while args[i] and args[i] ~= "--" do
    local spec = args[i]
    local short, long, takes_value = nil, nil, false

    -- Check for '=' at the end (takes value)
    if spec:sub(-1) == '=' then
        takes_value = true
        spec = spec:sub(1, -2)
    end

    -- Split short/long
    local slash = spec:find('/')
    if slash then
        short = spec:sub(1, slash-1)
        long = spec:sub(slash+1)
    elseif #spec == 1 then
        short = spec
    else
        long = spec
    end

    -- Check for valid spec
    if isempty(short) and isempty(long) then
        io.stderr:write("argparse: An option spec must have at least a short or a long flag\n")
        os.exit(1)
    end

    table.insert(specs, {short=short, long=long, takes_value=takes_value})
    i = i + 1
end

-- Check for '--' separator
if args[i] ~= "--" then
    io.stderr:write("argparse: Missing -- separator\n")
    os.exit(1)
end

-- Skip '--'
i = i + 1

-- Build lookup tables
local short_map, long_map = {}, {}
for _, s in ipairs(specs) do
    if s.short then short_map[s.short] = s end
    if s.long then long_map[s.long] = s end
end

-- Parse arguments
local results = {}
local positionals = {}
while i <= #args do
    local arg = args[i]
    if arg:sub(1,2) == "--" then
        local name = arg:sub(3)
        local spec = long_map[name]
        if spec then
            local key = not isempty(spec.long) and spec.long or spec.short
            if spec.takes_value then
                i = i + 1
                results[key] = args[i]
            else
                results[key] = true
            end
        else
            table.insert(positionals, arg)
        end
    elseif arg:sub(1,1) == "-" and #arg > 1 then
        local name = arg:sub(2,2)
        local spec = short_map[name]
        if spec then
            local key = not isempty(spec.long) and spec.long or spec.short
            if spec.takes_value then
                i = i + 1
                results[key] = args[i]
            else
                results[key] = true
            end
        else
            table.insert(positionals, arg)
        end
    else
        table.insert(positionals, arg)
    end
    i = i + 1
end

-- Print results
for k, v in pairs(results) do
    print(k, v)
end
print("--")
for _, v in ipairs(positionals) do
    print(v)
end
