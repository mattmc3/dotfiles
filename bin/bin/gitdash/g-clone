#!/usr/bin/env bash

# I do not prefer the git clone syntax because I have to remember or copy the
# URI structure of my repo according to protocol. I would prefer to just type
# `gclone dotfiles` and have magic happen. So this script was born.

define(){ IFS='\n' read -r -d '' ${1} || true; }

usage() {
  define USAGE <<'EOF'
speedy git clone

Usage:
  gclone [--protocol=<protocol>] [--site=<site>] <repo>

Notes:
  <repo> is in the form "user/repo-name" or "group/repo-name"

Options:
  -h --help              Show this screen.
  --protocol=<protocol>  The git protocol to use (ssh|https) [default: ssh].
  --site=<site>          The git site to use. Shorthand notations get
                         expanded for common sites:
                           'gh' for github.com
                           'gl' for gitlab.com
                           'bb' for bitbucket.org
                         [default: gh]
EOF

  echo "$USAGE"
}

_g-clone() {
  local pargs=()  # positional args
  local protocol=ssh
  local site=github.com
  local user=mattmc3

  # https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
  while [[ "$#" > 0 ]]; do
    case $1 in
      --protocol=*) protocol="${1#*=}"; shift;;
      --site=*)     site="${1#*=}"; shift;;
      -h|--help)    usage; exit 0;;
      -*)           echo "unknown option: $1" >&2; exit 1;;
      *)            pargs+=("$1"); shift;;
    esac
  done

  [ ${#pargs[@]} -eq 0 ] && { echo "ERROR: required params missing." >&2; usage; exit 1; }

  local repo=${pargs[0]}
  local parts=()
  IFS='/' read -ra parts <<< "$repo"

  [ "${#parts[@]}" -eq 4 ] && { protocol="${parts[0]}"; parts=("${parts[@]:1}"); }
  [ "${#parts[@]}" -eq 3 ] && { site="${parts[0]}"; parts=("${parts[@]:1}"); }
  [ "${#parts[@]}" -eq 2 ] && { user="${parts[0]}"; parts=("${parts[@]:1}"); }
  [ "${#parts[@]}" -eq 1 ] && { repo="${parts[0]}"; parts=("${parts[@]:1}"); }

  if [ "$site" == "gh" ]; then
    site=github.com
  elif [ "$site" == "gl" ]; then
    site=gitlab.com
  elif [ "$site" == "bb" ]; then
    site=bitbucket.org
  fi

  if [ "$protocol" == "ssh" ]; then
    protocol="git@"
    site="$site:"
  elif [ "$protocol" == "https" ]; then
    protocol="https://"
    site="$site/"
  else
    echo "ERROR: bad protocol specified: $protocol." >&2; usage; exit 1;
  fi

  local cmd="git clone ${protocol}${site}${user}/${repo}.git ${pargs[@]:1}"
  echo $cmd && $cmd
}

_g-clone $@
