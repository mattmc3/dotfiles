#!/bin/sh

##? cloner: A better git cloner.
# - Support short user/repo form
# - Default clone to ~/repos (configurable), not $PWD unless dir arg provided
# - Add flags I always forget but 99% of the time want (--recurse-submodules)

# Move the last arg into the $1 position and cycle the rest forward in order.
# This is accomplished by cycling each arg one-by-one from the front to the back. Right
# before the final move, the last arg will be the first, and the rest will be shifted
# forward one (ie: 1 2 3 4 => 4 1 2 3). This will let you `set` new args, and then
# `shift` the one that was in the last position, which is conveniently now $1.
pop_prep() {
  local i=0
  while [ $((i+=1)) -lt $# ]; do
    set -- "$@" "$1"
    shift
  done
  printf '%s\n' "$@"
}

# Take a repo and make it into the short user/repo form.
to_short_repo() {
  [ $# -eq 1 ] || return 1
  local default_user
  default_user="$(git config gitex.gitUser || git config user.name || whoami)"
  # Prepend default git user to always make 2+ fields and print user/repo form
  echo "${default_user}/${1}" | awk -F '[/:]' '{ print $(NF-1) "/" $NF }'
}

# Take a repo and determine its clone destination.
to_repo_dir() {
  [ $# -eq 1 ] || return 1
  # Get the default repo dir, replacing ~ with $HOME
  local dir
  dir="$( (git config gitex.repoPath || echo "$HOME/repos") | sed -e "s|^~|$HOME|" )"
  echo "${dir}/$( to_short_repo "$1" )"
}

# Take a repo and determine its URL.
to_repo_url() {
  [ $# -eq 1 ] || return 1
  case $1 in (https://*|git@*) echo "$1"; return ;; esac

  local gitdomain gitprotocol repo
  gitdomain="$( git config gitex.gitDomain || echo 'github.com' )"
  gitprotocol="$( git config gitex.gitProtocol || echo 'https' )"
  repo="$( to_short_repo "$1" )"

  case $gitprotocol in
    (ssh*|git*)
      echo "${gitprotocol}@${gitdomain}:${repo}.git"
      ;;
    (*)
      echo "${gitprotocol}://${gitdomain}/${repo}"
      ;;
  esac
}

cloner() {
  if [ $# -eq 0 ]; then
    echo >&2 "clone: Expecting a repo argument. See 'git clone -h'."
    return 1
  fi

  local dir repo addflags debug

  # If there are multiple args, then the last arg could either be the repo, or the
  # optional destination path. If the latter, then pop_prep again. A final arg starting
  # with any of these symbols was likely intended to be a path not a repo: ~ / . $
  if [ $# -gt 1 ]; then
    set -- $(pop_prep "$@")
    case "$1" in
      ([./~\$]*)
        dir="$1" && shift
        set -- $(pop_prep "$@")
        ;;
    esac
  fi

  # Ensure we have an explicit clone destination set, and pop off the repo.
  [ -z "$dir" ] && dir="$( to_repo_dir "$1" )"
  repo="$( to_repo_url "$1" )"
  shift

  # Now, reassemble the git command, add any additional flags
  addflags="$( git config gitex.cloneAddFlags )"
  debug="$( git config gitex.debug | tr '[:upper:]' '[:lower:]' )"
  case $debug in
    (t|true|1)
      echo "clone command modified to:"
      echo "  command git clone $addflags $* $repo $dir"
      ;;
  esac
  command git clone $addflags $@ "$repo" "$dir"
}
cloner "$@"
