#!/usr/bin/env bash
##? prj - project jumper
if ! command -v fzf >/dev/null; then
  echo "fzf command not found" >&2
  exit 1
elif ! command -v fd >/dev/null; then
  echo "fd command not found" >&2
  exit 1
fi

PROJECT_DIR="${PROJECT_DIR:-$HOME/Projects}"
usage=(
  "prj:    The project jumper"
  "usage:  prj [-h] [--init <shell>] [<query...>]"
)

opterr() {
  echo >&2 "prj: Unknown option '$1'"
}

init_sh() {
  cat <<-EOF
prj() {
  local selection="\$(command prj "\$@")"
  if [[ -n "\$selection" ]] && [[ -d "\$selection" ]]; then
    cd "\$selection"
  fi
}
# eval "\$(command prj --init sh)"
EOF
}

init_fish() {
  cat <<EOF
function prj
    set selection (command prj \$argv)
    if test -n "\$selection" && test -d "\$selection"
        cd "\$selection"
    end
end
# command prj --init fish | source
EOF
}

ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --)
      shift
      ARGS+=("$@")
      break
      ;;
    -h|--help)
      printf "%s\n" "${usage[@]}"
      exit 0
      ;;
    --init)
      INIT_SHELL="$2"
      if [[ -z $INIT_SHELL ]]; then
        echo "prj: --init requires an argument" >&2
        exit 2
      fi
      case "$INIT_SHELL" in
        sh|zsh|bash)
          init_sh
          exit 0
          ;;
        fish)
          init_fish
          exit 0
          ;;
        *)
          echo "prj: Unsupported shell '$INIT_SHELL'" >&2
          exit 2
          ;;
      esac
      ;;
    -* )
      opterr "$1"
      exit 2
      ;;
    *)
      ARGS+=("$1")
      ;;
  esac
  shift
done

PROJECT_DIR="${PROJECT_DIR/#\~/$HOME}"
if [[ ! -d $PROJECT_DIR ]]; then
  echo >&2 "prj: Project home directory not found '$PROJECT_DIR'"
  exit 1
fi

selection=$(
  fd --type d --hidden --max-depth 5 '\.git$' "$PROJECT_DIR" | sed -e "s|^$PROJECT_DIR/||" -e "s|/.git/$||" | sort -u |
  fzf --layout=reverse-list --query="${ARGS[*]}"
)

# Output the selected project directory
if [[ -n $selection ]] && [[ -d $PROJECT_DIR/$selection ]]; then
  echo "$PROJECT_DIR/$selection"
fi
