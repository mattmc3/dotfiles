#!/usr/bin/env bash
##? git update-submod - if there are submodules, update them, commit, and push

set -euo pipefail

main() {
  local root_git_dir submod line num_changed behind
  local -a submods

  root_git_dir="$(git rev-parse --show-toplevel || exit 1)"
  cd "$root_git_dir"

  # Make sure the repo has submodules.
  if [ ! -r ".gitmodules" ]; then
    echo >&2 "No .gitmodules found"
    exit 1
  fi

  # Make sure the repo has no staged changes
  if ! git diff --exit-code --name-only --cached >/dev/null 2>&1; then
    echo >&2 "update-submod: Cannot run command with changes already staged"
    exit 1
  fi

  # Make sure the repo is up to date.
  behind="$(git rev-list --count 'HEAD..@{upstream}' 2>/dev/null)"
  if [[ -n "$behind" ]] && (( behind > 0 )); then
    echo >&2 "Your repo is $behind commits behind. Run 'git pull' before using this command."
    exit 1
  fi

  # What are the submodules?
  while IFS= read -r line; do
    submods+=("$line")
  done < <(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')

  # Update the submodules
  git submodule update --remote --recursive --merge

  # See which submodules changed
  num_changed=0
  for submod in "${submods[@]}"; do
    if ! git diff --exit-code --name-only "$submod" >/dev/null 2>&1; then
      echo "Running: git add $submod"
      (( num_changed += 1 ))
      git add "$submod"
    else
      echo "Submodule was unchanged: $submod"
    fi
  done

  # Commit
  if (( num_changed == 0 )); then
    return 1
  elif (( num_changed == 1 )); then
    git commit -m "Update submodule"
  elif (( num_changed > 1 )); then
    git commit -m "Update submodules"
  fi

  # Push
  if (( num_changed > 0 )); then
    echo "Submodules updated. 'git push' when ready."
  fi
}
main "$@"
