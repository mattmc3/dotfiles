#!/usr/bin/env zsh

0=${(%):-%x}
zmodload zsh/zutil
DOTFILES=${DOTFILES:-$HOME/.config/dotfiles}

if [[ ! -d $DOTFILES ]]; then
  git clone --recursive git@github.com:mattmc3/dotfiles.git $DOTFILES
fi

function _dotty_install {
  _dotty_backup
  cd $DOTFILES
  stow --verbose --dotfiles --target=$HOME/.config .config

  cd $HOME
  for f in bin .bashrc .bash_profile .vimrc .zshenv; do
    [[ -e $HOME/$f ]] || ln -sf ${DOTFILES##$HOME/}/$f $HOME/$f
  done
}

function _dotty_backup {
  local flag_dryrun
  zparseopts -D -F -K -- \
    {n,-dry-run}=flag_dryrun ||
    return 1

  local backup_dir=${DOTFILES}/_bak/dotfiles_$(date +"%Y%m%d_%H%M%S")
  [[ -n "$flag_dryrun" ]] || mkdir -p "$backup_dir"
  echo "backing up existing dotfiles from your home to ${backup_dir}..."
  rsync -aLv $flag_dryrun --include-from="$DOTFILES/bin/dotfiles.rsync" "$HOME/" "$backup_dir"
}

function _dotty_help {
  local usage=(
    "dotty [-h|--help]"
    "dotty backup [-n|--dry-run]"
    "dotty install"
  )
  print -l $usage
}

function _dotty {
  local flag_help

  # -D pulls parsed flags out of $@
  # -F says fail if we find a flag that wasn't defined
  # -K allows us to set default values without zparseopts overwriting them
  zmodload zsh/zutil
  zparseopts -D -F -K -- \
    {h,-help}=flag_help ||
    return 1

  [[ -z "$flag_help" ]] || { _dotty_help && return }

  local cmd="$1"
  if (( $+functions[_dotty_${cmd}] )); then
    shift
    _dotty_${cmd} "$@"
    return $?
  else
    echo >&2 "dotty: command not found '${cmd}'" && return 1
  fi
}

_dotty "$@"
