{
/*
     // Place your snippets for SQL here. Each snippet is defined under a snippet name and has a prefix, body and
     // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
     // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
     // Example:
     "Print to console": {
        "prefix": "log",
        "body": [
            "console.log('$1');",
            "$2"
        ],
        "description": "Log output to console"
    }
*/
    "select-basic": {
        "prefix": "select_basic",
        "body": [
            "select *",
            "from ${schema:schema-name}.${table:table-name}",
            "where </* add search conditions here */>",
            "order by 1"
        ],
        "description": "Select rows from a table or view"
    },
    "select-top": {
        "prefix": "select_top",
        "body": [
            "select top ${top} *",
            "from ${schema:schema-name}.${table:table-name}",
            "where </* add search conditions here */>",
            "order by 1"
        ],
        "description": "Select top x rows from a table or view"
    },
    "select-count": {
        "prefix": "select_count",
        "body": [
            "select count(*) as cnt",
            "from ${schema:schema-name}.${table:table-name}"
        ],
        "description": "Select count of occurences of field values"
    },
    "select-count-group-by": {
        "prefix": "select_count_group_by",
        "body": [
            "select ${field} as value, count(*) as cnt",
            "from ${schema:schema-name}.${table:table-name}",
            "group by ${field}",
            "order by 1"
        ],
        "description": "Select count of occurences of field values"
    },
    "select-duplicates": {
        "prefix": "select_duplicates",
        "body": [
            "select ${field} as value, count(*) as cnt",
            "from ${schema:schema-name}.${table:table-name}",
            "group by ${field}",
            "having count(*) > 1",
            "order by 1"
        ],
        "description": "Select duplicate values in a table"
    },
    "update-basic": {
        "prefix": "update_basic",
        "body": [
            "update t",
            "set t.${field} = ${value}",
            "from ${schema:schema-name}.${table:table-name} t",
            "where </* add search conditions here */>"
        ],
        "description": "Basic update statement"
    },
    "insert-basic": {
        "prefix": "insert_basic",
        "body": [
            "insert into ${schema:schema-name}.${table:table-name} (",
            "    $1",
            "    -- ,field2",
            "    -- ,field3",
            ")",
            "values (",
            "    $2",
            "    -- ,value2",
            "    -- ,value3",
            ")"
        ],
        "description": "Basic insert statement"
    },
    "delete-basic": {
        "prefix": "delete_basic",
        "body": [
            "delete from ${schema:schema-name}.${table:table-name}",
            "where </* add search conditions here */>"
        ],
        "description": "Basic delete statement"
    },
    "create-proc": {
        "prefix": "create_proc",
        "body": [
            "if objectproperty(object_id('${schema}.${proc}'), 'IsProcedure') is null begin",
            "    exec('create proc ${schema}.${proc} as')",
            "end",
            "go",
            "--------------------------------------------------------------------------------",
            "-- Description:",
            "-- Usage:",
            "--   exec ${schema}.${proc}",
            "--------------------------------------------------------------------------------",
            "alter procedure ${schema}.${proc} as",
            "   set nocount on",
            "",
            "   -- Add the stored proc contents here...",
            "   $1",
            "go"
        ],
        "description": "Basic create stored procedure shell"
    },
    "create-view": {
        "prefix": "create_view",
        "body": [
            "if objectproperty(object_id('${schema}.${view}'), 'IsView') is null begin",
            "    exec('create view ${schema}.${view} as select 1 c')",
            "end",
            "go",
            "-------------------------------------------------------------------------------",
            "-- Description:",
            "-- Usage:",
            "--   select top 200 * from ${schema}.${view}",
            "-------------------------------------------------------------------------------",
            "alter view ${schema}.${view} as",
            "   -- select *",
            "   -- from table",
            "   $1",
            "go"
        ],
        "description": "Basic create view shell"
    },
    "create-scalar-udf": {
        "prefix": "create_scalar_udf",
        "body": [
            "if objectproperty(object_id('${schema}.${udf}'), 'IsScalarFunction') is null begin",
            "    exec('create function ${schema}.${udf} returns int as begin return null end')",
            "end",
            "go",
            "--------------------------------------------------------------------------------",
            "-- Description:",
            "-- Usage:",
            "--    select ${schema}.${udf}(a, b, c)",
            "--------------------------------------------------------------------------------",
            "alter function ${schema}.${udf}(@s varchar(100)) returns int as",
            "begin",
            "   return len(@s)",
            "end",
            "go"
        ],
        "description": "Basic create scalar udf shell"
    },
    "create-tabular-udf": {
        "prefix": "create_tabular_udf",
        "body": [
            "if objectproperty(object_id('${schema}.${udf}'), 'IsTableFunction') is null begin",
            "    exec('create function ${schema}.${udf} returns @t table(x int) as begin return end')",
            "end",
            "go",
            "--------------------------------------------------------------------------------",
            "-- Description:",
            "-- Usage:",
            "--    select * from ${schema}.${udf}()",
            "--------------------------------------------------------------------------------",
            "alter function ${schema}.${udf}(@s varchar(100))",
            "    returns @result table (",
            "        -- Columns returned by the function",
            "        id int identity(1, 1) primary key not null",
            "        ,result varchar(100) null",
            "    )",
            "begin",
            "   return",
            "end",
            "go"
        ],
        "description": "Basic create tabular udf shell"
    },
    "create-non-clustered-index": {
        "prefix": "create_non_clustered_index",
        "body": [
            "create nonclustered index IX_${table}_${field} on ${schema}.${table} (${field})"
        ],
        "description": "Create for a non-clustered index"
    }
}
