#!/bin/zsh
##? repo - Deal with git repos

: ${ZPLUGINDIR:=${ZDOTDIR:-$HOME}/.zplugins}
typeset -gHa _repo_zopts=(extended_glob no_monitor)

function -repo-help {
  emulate -L zsh; setopt local_options $_repo_zopts
  echo "repo - Deal with git repos"
  echo ""
  echo "commands:"
  echo "  help                 print this help"
  echo "  home                 print home for all repos"
  echo "  list                 list repos"
  echo "  path <REPO>          print repo path"
  echo "  init <REPO>          print repo init file"
  echo "  remove <REPOS...>    remove repos"
  echo "  clone  <REPOS...>    clone repos"
  echo "  update [<REPOS...>]  update repos"
  echo ""
  echo "examples:"
  echo "  repo in <repos.txt"
}

# Collect <redirected or piped| input
function -repo-collect-input {
  emulate -L zsh; setopt local_options $_repo_zopts
  printf '%s\n' "${@}"
  if [[ ! -t 0 ]]; then
    local data
    while IFS= read -r data || [[ -n "$data" ]]; do
      data=${data%\#*}
      [[ -n "$data" ]] || continue
      printf '%s\n' "$data"
    done
  fi
}

function -repo-home {
  emulate -L zsh; setopt local_options $_repo_zopts
  echo $ZPLUGINDIR
  [[ -d $ZPLUGINDIR ]] || return 1
}

function -repo-path {
  emulate -L zsh; setopt local_options $_repo_zopts
  (( $# )) || return 1
  echo $ZPLUGINDIR/$1
  [[ -d $ZPLUGINDIR/$1 ]] || return 1
}

function -repo-init {
  emulate -L zsh; setopt local_options $_repo_zopts
  (( $# )) || return 1
  local -a initfiles=(
    $ZPLUGINDIR/$1/${1:t}.plugin.zsh(N)
    $ZPLUGINDIR/$1/*.{plugin.zsh,zsh-theme,zsh,sh}(N)
    $ZPLUGINDIR/$1/${1:t}.plugin.zsh
  )
  echo $initfiles[1]
  [[ -e $initfiles[1] ]] || return 1
}

function -repo-list {
  emulate -L zsh; setopt local_options $_repo_zopts
  (( $# == 0 )) || return 1
  local -a repos=($ZPLUGINDIR/*/*/.git(/N))
  (( $#repos )) || return 1
  for repo in $repos:A:h; do
    echo ${repo:h:t}/${repo:t}
  done
}

function -repo-update {
  emulate -L zsh; setopt local_options $_repo_zopts
  (( $# )) || set -- $(-repo-list)
  local repo repodir oldsha newsha err=0
  for repo in $@; do
    echo "Updating $repo..."
    repodir=$ZPLUGINDIR/$repo
    if [[ ! -d $repodir ]]; then
      echo >&2 "ERROR: Repo not found '$repo'."
      err=1
      continue
    fi
    {
      oldsha=$(command git -C $repodir rev-parse --short HEAD)
      command git -C $repodir pull --quiet --ff --depth 1 --rebase --autostash
      newsha=$(command git -C $repodir rev-parse --short HEAD)
      if [[ $oldsha != $newsha ]]; then
        echo "Repo updated '$repo': $oldsha->$newsha"
        git -C $repodir --no-pager log --oneline --ancestry-path ${oldsha}..${newsha} 2>/dev/null
      fi
    } &
  done
  wait
  echo "Repo updates complete."
  return $err
}

function -repo-clone {
  emulate -L zsh; setopt local_options $_repo_zopts
  local repo repodir
  for repo in $@; do
    repodir=$ZPLUGINDIR/$repo
    if [[ -d $repodir ]]; then
      echo "Found $repo..."
    else
      echo "Cloning $repo..."
      {
        command git clone --quiet --depth 1 --recursive --shallow-submodules \
          https://github.com/$repo $repodir
        echo "Clone complete '$repo'."
      } &
    fi
  done
  wait
}

function -repo-remove {
  emulate -L zsh; setopt local_options $_repo_zopts
  local err=0
  for repo in $@; do
    if ! [[ "$ZPLUGINDIR" =~ $HOME/* ]]; then
      echo >&2 "repo: \$ZPLUGINDIR not set correctly '$ZPLUGINDIR'."
      return 2
    elif [[ -d $ZPLUGINDIR/$repo ]]; then
      command rm -rf -- $ZPLUGINDIR/$repo
    else
      echo "Repo not found '$repo'."
      err=1
    fi
  done
  return $err
}

function repo {
  emulate -L zsh; setopt local_options $_repo_zopts
  if (( $# == 0 )); then
    echo >&2 "repo: Expecting command argument."
    return 1
  fi

  # collect piped and passed args
  local -a args=("${(@f)$(-repo-collect-input "$@")}")
  set -- $args

  local repo err=1
  local cmd=$1; shift
  if (( ${+functions[-repo-$cmd]} )); then
    -repo-$cmd $@
  elif [[ "$cmd" == (-h|--help) ]]; then
    -repo-help
  else
    echo >&2 "repo: Unknown command '"$cmd"'"
    return 1
  fi
}
repo "$@"
